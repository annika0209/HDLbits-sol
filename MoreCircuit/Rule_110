
<<<<<<< HEAD
//////Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete).

// There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours


=======
>>>>>>> 218c6c6fa8e2a00744a7e960576d263cc556a253
module top_module(
    input clk,
    input load,
    input [511:0] data,
<<<<<<< HEAD
    output  reg [511:0] q ); 

    wire    [511:0] Next_C;
    
    // COMBINATIONAL LOGIC OF Next_C
    assign  Next_C[0] =   1'b0  ^ q[1];
    assign  Next_C[511] = q[510] ^ 1'b0;

    wire    [2:0]   LCR;
    
    genvar i;
    generate	
        for (i=1;i<511;i=i+1) begin: COMBI
            // assign  Next_C[i] = q[i-1] ^ q[i+1];
            assign  LCR[i] = q[(i+1):(i-1)];  
            always @(*) begin
                casex (LCR)
                    3'b000  :   Next_C[i] = 0; 
                    3'b001  :   Next_C[i] = 1; 
                    3'b010  :   Next_C[i] = 1; 
                    3'b011  :   Next_C[i] = 0; 
                    3'b100  :   Next_C[i] = 1; 
                    3'b101  :   Next_C[i] = 1; 
                    3'b110  :   Next_C[i] = 1; 
                    3'b111  :   Next_C[i] = 0; 
                    default :   Next_C[i] = 0;
                endcase
            end
        end
    endgenerate

    // SEQUENTIAL LOGIC OF Next_C
=======
    output  reg [511:0] q 
    ); 
    
    wire    [511:0] Next_q;
// COMBINATIONAL LOGIC OF Next_q
    
    assign  Next_q[0]   =    q[0];
    //as same as the below...
    // assign  Next_q[0]   =    (~q[1] & 1'b0)
    //                         |(q[0] & 1'b1)
    //                         |(q[1] & ~q[0] & 1'b0);
    
    assign  Next_q[511] =    q[510]|(q[511] & ~q[510]);
    //as same as the below...
    // assign  Next_q[511] =    (1'b1 & q[510])
    //                         |(q[511] & ~q[510])
    //                         |(1'b0 & ~q[511] & q[510]);
    
    
    genvar i;
    generate	
        for (i=0;i<510;i=i+1) begin: COMBI
            assign  Next_q[i+1] = (~q[i+2] & q[i])
                                |(q[i+1] & ~q[i])
                                |(q[i+2] & ~q[i+1] & q[i]);

            end
    endgenerate

// SEQUENTIAL LOGIC OF Next_q
>>>>>>> 218c6c6fa8e2a00744a7e960576d263cc556a253
    always @(posedge clk) begin
        if (load) begin
                q    <=     data;
        end
<<<<<<< HEAD
        else    q    <=     Next_C;
=======
        else    q    <=     Next_q;
>>>>>>> 218c6c6fa8e2a00744a7e960576d263cc556a253
    end
    
    endmodule