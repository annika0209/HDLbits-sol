
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output [255:0] q 
    ); 

    // wire [255:0] Next_q;
    
    //Making a virtual grid 
    reg  [ 17:0] VirtualGrid [0:17]; //18X18 arbitrary grid
    // initial
    // $readmemb("InitLifeMap.mem",VirtualGrid);

    //Assigning Wires between 'q' and 'grid' 
    genvar i;
    generate	
        for (i=0;i<16;i=i+1) begin: GRID_MK
            always @(*) begin
                VirtualGrid[i+1] = {q[i] , q , q[16*i + 15]};
            end
        end 
    endgenerate

    always @(*) begin
        VirtualGrid[0]  =   {q[240] , q[255:240] , q[255]};
        VirtualGrid[17]  =  {q[0]   , q[15:0]    , q[15]};
    end
    //
    genvar i, col;
    generate	
        for (col=1;col<17;col=col+1) begin: Column 
            for (i=1;i<17;i=i+1) begin: Vectors
                UnitBox_3   uUnitBox_3(
                    .Grid3_in(VirtualGrid[col-1:col+1][i+1:i-1]),
                    .load(load),
                    .Center_out(VirtualGrid[col][i])
                );
            end 
        end
    endgenerate
            


endmodule

//(3X3 array) Checking Neighbours Sequential Logic of an UnitGrid
module UnitBox_3 (
    input   reg [2:0]   Grid3_in [0:2],
    input   wire        load,
    input   wire        data,
    output  reg         Center_out;
);
    wire    [2:0] UnitGrid [0:2];
    wire [3:0] Sum;

// checking logic
    assign  UnitGrid = Grid3_in;
    assign  Sum =       UnitGrid[0][0]
                    +   UnitGrid[0][1]
                    +   UnitGrid[0][2]
                    +   UnitGrid[1][0]
                    // +   UnitGrid[1][1]
                    +   UnitGrid[1][2]
                    +   UnitGrid[2][0]
                    +   UnitGrid[2][1]
                    +   UnitGrid[2][2];
always @(posedge clk) begin
    if (load) begin
        Center_out  <=  data;
    end
    else    begin
        casex (Sum)
            4'b000x :    Center_out <= 0;               //DEATH <- lack of population
            4'b0010 :    Center_out <= UnitGrid[1][1];  //maintain 
            4'b0011 :    Center_out <=  1;              //live
            default :    Center_out <=  0;              //DEATH <- overpopulation 
        endcase
    end
end     	
endmodule

    // for (i=0;i<256;i=i+1) begin: COMBI
    //     // assign  VirtualQ = {q[i],q,q[15]};
    // wire   [1:0]    SUM;
    


    // generate   
    //         for (i=0;i<16;i=i+1) begin: COMBI
    //             assign  Next_q[16*i+15 : 16*i] = VirtualGrid[i];
    //         end
    // endgenerate
    
    // // SEQUENTIAL LOGIC OF Next_q
    // always @(posedge clk) begin
    //     if (load) begin
    //             q    <=     data;
    //     end
    //     else    q    <=     Next_q;
    // end
