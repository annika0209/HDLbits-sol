
//wrong version

module top_module(
    input clk,
    input areset,  // async active-high reset to zero
    input load,
    input ena,
    input [3:0] data,
    output reg [3:0] q); 
wire    [3:0]   q0;
unit_reg u0(.shift_in(0),    .data(data[3]), .clk(clk), .areset(areset), .load(load), .ena(ena), .q(q0[3]));
unit_reg u1(.shift_in(q0[3]), .data(data[2]), .clk(clk), .areset(areset), .load(load), .ena(ena), .q(q0[2]));
unit_reg u2(.shift_in(q0[2]), .data(data[1]), .clk(clk), .areset(areset), .load(load), .ena(ena), .q(q0[1]));
unit_reg u3(.shift_in(q0[1]), .data(data[0]), .clk(clk), .areset(areset), .load(load), .ena(ena), .q(q0[0]));

always @(*) begin
    q=q0;
end 
endmodule



module unit_reg(
    input shift_in,
    input data,
    input clk,
    input areset,
    input load,
    input ena,
    output reg q
);

always @(posedge clk or posedge areset) begin
    if(areset) begin
         q <= 1'b0;
    end
    else begin 
        if(load) begin
            q <= data;
        end
        else begin
            q <= ena ? shift_in : q ;
        end
    end
    end


endmodule

//right version

module top_module(
    input clk,
    input load,
    input [1:0] ena,
    input [99:0] data,
    input areset,
    output reg [99:0] q
    );

    always @(posedge clk) begin
        if (load) begin
            
            q <= data;
        end
        else begin
            case (ena)
                2'b01: q <= {q[0], q[99:1]}; // 오른쪽 회전
                2'b10: q <= {q[98:0], q[99]}; // 왼쪽 회전
                default: q <= q; // 변화 없음
            endcase
        end
    end

endmodule
