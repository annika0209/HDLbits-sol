    module top_module(
    input clk,
    input areset,    // Asynchronous reset to OFF
    input j,
    input k,
    output out); 

	localparam OFF = 0  ;
	localparam ON  = 1  ;
	reg 	state       ;
	reg 	next_state  ;

    always @(*) begin    // This is a combinational always block
        casex (state)
			OFF 		:	next_state = j ? ON  : OFF  ;	
			ON   		: 	next_state = k ? OFF : ON   ;
			default	    : 	next_state = OFF;
		endcase	// State transition logic
    end

    always @(posedge clk or posedge areset) begin    // This is a sequential always block
    // State flip-flops with asynchronous reset
		if (areset) begin
			state <= OFF;
		end else begin
			state <= next_state;
		end
	end

    // Output logic
    assign out = (state == ON);

endmodule



// // module DFF #(BITWIDTH = 1)	(
// // 	input					clk,
// // 	input	[BITWIDTH-1:0]	D,
// // 	input					rst,
// // 	output	[BITWIDTH-1:0]	Q
// // );
// // 	always @(posedge clk) begin
// // 		if (rst) begin
// // 			Q <= (BITWIDTH)'b0;
// // 		end else begin
// // 			Q <= D
// // 		end
// // 	end
// // endmodule