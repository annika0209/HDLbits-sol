
// The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000.
// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. (The testbench will test with non-one hot inputs to make sure you're not trying to do something more complicated).


module top_module(
    input in,
    input 	[3:0] state,
    output 	[3:0] next_state,
    output out); 

    //sequential logic 
    // always @(posedge clk ) begin
    //     state <= next_state;
    // end

    localparam A = 0;
    localparam B = 1;
    localparam C = 2;
    localparam D = 3;
    //state transition logic 

    assign	next_state[A] =	(state[0]&(~in))|(state[2]&(~in));			// A 상태로 변하는 경우	 
    assign	next_state[B] =	(state[0]&in)|(state[1]&in)|(state[3]&in);	// B 상태로 변하는 경우
    assign	next_state[C] =	(state[1]&(~in))|(state[3]&(~in));			// C 상태로 변하는 경우 
    assign	next_state[D] =	(state[2]&(in));							// D 상태로 변하는 경우

    // always @(*) begin
    //     case (state)
    //         A   :   next_state = in ? B : A;
    //         B   :   next_state = in ? B : C;
    //         C   :   next_state = in ? D : A;
    //         D   :   next_state = in ? B : C;
    //         default:next_state = A         ;
    //     endcase
    // end

    //output logic 
	// assign 	out		=	(state == D);	
	assign 	out		=	state[3];	

endmodule


/*
원핫 인코딩(One-hot encoding)은 디지털 논리회로, 특히 유한 상태 기계(Finite State Machine, FSM) 설계에서 중요한 역할을 하는 상태 인코딩 기법입니다.

## 의미

원핫 인코딩은 각 상태를 고유한 비트 패턴으로 표현하는 방식으로, 오직 하나의 비트만 '1'(hot)이고 나머지 모든 비트는 '0'인 형태를 가집니다[1][5]. 예를 들어, 4개의 상태를 가진 FSM에서 각 상태는 다음과 같이 표현될 수 있습니다:

- 상태 A: 1000
- 상태 B: 0100
- 상태 C: 0010
- 상태 D: 0001

## 목적

원핫 인코딩의 주요 목적은 다음과 같습니다:

1. **회로 간소화**: 상태 디코딩 로직이 단순화되어 조합 논리 회로가 간단해집니다[3][6]. 각 상태가 고유한 비트로 표현되므로, 상태 확인이 단일 비트 검사로 가능해집니다.

2. **성능 향상**: 상태 전이 로직이 간단해져 더 빠른 클록 속도로 동작할 수 있습니다[5]. 이는 특히 FPGA 구현에서 유리합니다.

3. **디버깅 용이성**: 각 상태가 독립적인 비트로 표현되어 디버깅과 설계 수정이 쉬워집니다[3][6].

4. **글리치 감소**: 상태 전이 시 변화하는 비트 수가 적어 글리치 발생 가능성이 줄어듭니다[5].

5. **불법 상태 감지**: 둘 이상의 비트가 '1'인 상태는 쉽게 감지되어 오류 처리가 용이합니다[5].

## 장단점

**장점**:
- 상태 디코딩이 간단하고 빠릅니다[3].
- 상태 전이 로직이 단순화됩니다[5].
- FPGA 구현에 적합합니다[3].

**단점**:
- 상태 수에 비례하여 플립플롭 수가 증가합니다[3][6].
- 많은 상태를 가진 FSM에서는 하드웨어 리소스 사용이 증가할 수 있습니다.

원핫 인코딩은 특히 FPGA 기반 설계에서 널리 사용되며, 회로의 성능과 디버깅 용이성을 향상시키는 효과적인 기법입니다[3][5]. 하지만 상태 수가 매우 많은 경우에는 리소스 사용량을 고려하여 다른 인코딩 방식과 비교 검토가 필요할 수 있습니다.

Citations:
[1] https://sohyunwriter.tistory.com/46
[2] https://www.geeksforgeeks.org/what-is-one-hot-design/
[3] http://only-vlsi.blogspot.com/2008/06/one-hot-encoding.html
[4] https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&blogId=baek2sm&logNo=221802541443&categoryNo=36&parentCategoryNo=0&currentPage=1&postListTopCurrentPage=1&from=postView
[5] https://en.wikipedia.org/wiki/One-hot
[6] https://com24everyday.tistory.com/entry/%EB%85%BC%EB%A6%AC%ED%9A%8C%EB%A1%9C%EC%99%80-%EC%84%A4%EA%B3%84
[7] http://ebook.pldworld.com/_eBook/FPGA%EF%BC%8FHDL/-Examples-/Chapter%205%20The%20One%20Hot%20Technique%20in%20Finite-State%20Machine%20Design.pdf
[8] https://nate9389.tistory.com/925
[9] https://blog.naver.com/beahey/90160168726
[10] https://velog.io/@tmdtmdqorekf/%EB%85%BC%EB%A6%AC%ED%9A%8C%EB%A1%9C%EC%84%A4%EA%B3%84-State-Encoding
[11] https://www.youtube.com/watch?v=agvfUvUNI4A
[12] http://www.kocw.net/home/cview.do?mty=p&kemId=1378651&ar=relateCourse
[13] https://www.allelcoelec.com/blog/why-use-one-hot-encoding-for-categorical-data.html
[14] https://www.geeksforgeeks.org/ml-one-hot-encoding/
[15] https://www.youtube.com/watch?v=uB1Ktfq0UtY
[16] http://www.unm.edu/~zbaker/ece238/slides/19.pdf
[17] https://patents.google.com/patent/KR100264962B1/ko
[18] https://staff.cs.upt.ro/~opritoiu/ca/labs/one_hot_encoding.pdf
[19] https://www.cambridge.org/lv/download_file/127504/
[20] https://blog.naver.com/jhwany87/10072723929?viewType=pc

*/