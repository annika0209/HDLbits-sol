/*
    The following is the state transition table 
    for a Moore state machine with one input, one output, and four states. 
    
    Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.
    
    Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.
*/


module top_module(
    input in,
    input   [1:0] state,
    output  [1:0] next_state,
    output out); //

    parameter A=0, B=1, C=2, D=3;

    // State transition logic: next_state = f(state, in)

    // Output logic:  out = f(state) for a Moore state machine

endmodule
    
    
    
    
    
    // always @(*) begin    // This is a combinational always block
    //     casex (state)
	// 		OFF		:	next_state = j ? ON		: OFF	;	
	// 		ON		: 	next_state = k ? OFF	: ON	;
	// 		default	: 	next_state = OFF;
	// 	endcase	// State transition logic
    // end

    // always @(posedge clk) begin    // This is a sequential always block
    //     // State flip-flops with synchronous reset
	// 	if (reset) begin
	// 		state <= OFF;
	// 	end else begin
	// 		state <= next_state;
	// 	end
	// end

    // // Output logic
    // assign out = (state == ON);
