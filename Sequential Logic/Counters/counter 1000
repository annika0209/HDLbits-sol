<<<<<<< HEAD
module top_module (
    input clk,
    input reset,
    output OneHertz,
    output [2:0] c_enable
); //
    reg [3:0] Q0, Q1, Q2;
    
    
    bcdcount counter0 (.clk(clk), .reset(reset), .enable(c_enable[0]), .Q(Q0));
    bcdcount counter1 (.clk(clk), .reset(reset), .enable(c_enable[1]), .Q(Q1));
    bcdcount counter2 (.clk(clk), .reset(reset), .enable(c_enable[2]), .Q(Q2));
	
    assign c_enable[0] 	= (reset == 0);
    assign c_enable[1] 	= (Q0 == 4'd9)&(reset == 0);
    assign c_enable[2] 	= (Q1 == 4'd9)&(Q0 == 4'd9)&(reset == 0);
    assign OneHertz 	= (Q2 == 4'd9)&(Q1 == 4'd9)&(Q0 == 4'd9)&(reset == 0);
   
    //assign OneHertz 	= ({Q2,Q1,Q0} == 12'd999)&(reset == 0); -> ?
    //

    
endmodule
=======
module top_module (
    input clk,
    input reset,
    output OneHertz,
    output [2:0] c_enable
); //
    reg [3:0] Q0, Q1, Q2;
    
    
    bcdcount counter0 (.clk(clk), .reset(reset), .enable(c_enable[0]), .Q(Q0));
    bcdcount counter1 (.clk(clk), .reset(reset), .enable(c_enable[1]), .Q(Q1));
    bcdcount counter2 (.clk(clk), .reset(reset), .enable(c_enable[2]), .Q(Q2));
	
    assign c_enable[0] 	= (reset == 0);
    assign c_enable[1] 	= (Q0 == 4'd9)&(reset == 0);
    assign c_enable[2] 	= (Q1 == 4'd9)&(Q0 == 4'd9)&(reset == 0);
    assign OneHertz 	= (Q2 == 4'd9)&(Q1 == 4'd9)&(Q0 == 4'd9)&(reset == 0);
   
    //assign OneHertz 	= ({Q2,Q1,Q0} == 12'd999)&(reset == 0); -> ?
    //

    
endmodule
>>>>>>> d96ee98fb7d32fd804ae8ec4881a76e286ef3d75
